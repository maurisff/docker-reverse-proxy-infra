version: "3.7"
# docker stack deploy -c docker-stack-infra.yml infra
services:
    proxy:
        image: traefik:v2.3.7
        environment:
            - TZ=America/Sao_Paulo
        command:
            - "--api=true"
            - "--api.dashboard=true"
            - "--metrics=true"
            - "--metrics.prometheus=true"
            - "--metrics.prometheus.buckets=0.1,0.3,1.2,5"
            - "--accesslog=true"
            - "--accesslog.filepath=/etc/traefik/log/access.log"
            - "--accesslog.format=json"
            - "--accesslog.fields.names.StartUTC=drop"
            - "--providers.docker=true"
            - "--providers.docker.swarmMode=true"
            - "--providers.docker.network=reverse-proxy"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.postgres.address=:5432"
            - "--entrypoints.mongodb.address=:27018"
            - "--entrypoints.rabbitmq.address=:5672"
        ports:
            - 80:80
            - 5432:5432
            - 27018:27017
            - 5672:5672
        deploy:
            placement:
              constraints: [node.role == manager]
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
            labels:
              # Dashboard
              - "traefik.enable=true"
              - "traefik.docker.network=reverse-proxy"
              - "traefik.http.routers.proxy.rule=Host(`proxy.localhost`)"
              - "traefik.http.routers.proxy.service=api@internal"
              - "traefik.http.routers.proxy.entrypoints=web"
              - "traefik.http.routers.proxy.middlewares=authtraefik"
              # ATENÇÃO: Quando a senha tiver sifrão($) o mesmo deve ser sustituido por 2 sifrão. Ex: 01asr$ss => 01asr$$ss
              # user:password => admin:admin
              - "traefik.http.middlewares.authtraefik.basicauth.users=admin:$$apr1$$50a3wydp$$Ebx2CkMW01E0EmX8zJYPm."
              - "traefik.http.services.dummy-proxy-srv.loadbalancer.server.port=9999"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - reverse-proxy

    portainer-agent:
        image: portainer/agent
        depends_on:
          - proxy
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /var/lib/docker/volumes:/var/lib/docker/volumes
        networks:
          - reverse-proxy
        deploy:
          mode: global
          placement:
            constraints: [node.platform.os == linux]
          labels:
            - "traefik.enable=false"

    portainer:
        image: portainer/portainer-ce
        depends_on:
          - portainer-agent
          - proxy
        command: -H tcp://portainer-agent:9001 --tlsskipverify
        volumes:
          - portainer_data:/data
        networks:
          - reverse-proxy
        deploy:
          placement:
            constraints: [node.role == manager]
          mode: replicated
          replicas: 1
          update_config:
            parallelism: 2
            delay: 10s
          restart_policy:
            condition: on-failure
          labels:
            # Dashboard
            - "traefik.enable=true"
            - "traefik.docker.network=reverse-proxy"
            - "traefik.http.routers.portainer.rule=Host(`portainer.localhost`)"
            - "traefik.http.routers.portainer.service=portainer"
            - "traefik.http.routers.portainer.entrypoints=web"
            - "traefik.http.services.portainer.loadbalancer.server.port=9000"
networks:
   reverse-proxy:
      external: true
volumes:
  portainer_data: